import numpy as np
from scipy.linalg import svd

# =======================
# Basic Array Operations
# =======================

# 1D array
a = np.array([1, 2, 3])
print("Type: %s" % type(a))
print("Shape: %s" % a.shape)
print("Elements:", a[0], a[1], a[2])

# Modify element
a[0] = 5
print("Modified array a:", a)

# 2D array
b = np.array([[1, 2, 3], [4, 5, 6]])
print("\nShape of b: %s" % str(b.shape))
print("Accessing elements:", b[0, 0], b[0, 1], b[1, 0])

# =======================
# Special Matrices
# =======================

a = np.zeros((2, 2))
print("\nAll-zero matrix:\n%s" % a)

b = np.ones((1, 2))
print("\nAll-ones matrix:\n%s" % b)

d = np.eye(2)
print("\nIdentity matrix:\n%s" % d)

e = np.random.random((2, 2))
print("\nRandom matrix:\n%s" % e)

# =======================
# Vectorized Sum Example
# =======================

print("\nVectorized sum example")
x = np.array([[1, 2], [3, 4]])
print("X:\n%s" % x)
print("Sum: %s" % np.sum(x))
print("Sum over axis 0 (column-wise): %s" % np.sum(x, axis=0))
print("Sum over axis 1 (row-wise): %s" % np.sum(x, axis=1))

# =======================
# Dot, Outer, Element-wise Products
# =======================

a = np.arange(10000)
b = np.arange(10000)

dp = np.dot(a, b)
print("\nDot product: %s" % dp)

# For outer product, we avoid printing the huge result
op = np.outer(a, b)
print("Outer product computed. (Not displayed due to size)")

ep = np.multiply(a, b)
print("Element-wise product (first 10 elements):\n%s" % ep[:10])

# =======================
# Matrix Transposition
# =======================

x = np.array([[1, 2], [3, 4]])
print("\nOriginal X:\n%s" % x)
print("Transpose of X:\n%s" % x.T)

# =======================
# Singular Value Decomposition (SVD)
# =======================

A = np.array([[1, 2], [3, 4], [5, 6]])
print("\nMatrix A:\n%s" % A)

U, S, VT = svd(A)
print("\nU matrix:\n%s" % U)
print("\nSingular values:\n%s" % S)
print("\nVT matrix:\n%s" % VT)

output

Type: <class 'numpy.ndarray'>
Shape: 3
Elements: 1 2 3
Modified array a: [5 2 3]

Shape of b: (2, 3)
Accessing elements: 1 2 4

All-zero matrix:
[[0. 0.]
 [0. 0.]]

All-ones matrix:
[[1. 1.]]

Identity matrix:
[[1. 0.]
 [0. 1.]]

Random matrix:
[[0.72947785 0.35699656]
 [0.6033227  0.4757331 ]]

Vectorized sum example
X:
[[1 2]
 [3 4]]
Sum: 10
Sum over axis 0 (column-wise): [4 6]
Sum over axis 1 (row-wise): [3 7]

Dot product: 333283335000
Outer product computed. (Not displayed due to size)
Element-wise product (first 10 elements):
[ 0  1  4  9 16 25 36 49 64 81]

Original X:
[[1 2]
 [3 4]]
Transpose of X:
[[1 3]
 [2 4]]

Matrix A:
[[1 2]
 [3 4]
 [5 6]]

U matrix:
[[-0.2298477   0.88346102  0.40824829]
 [-0.52474482  0.24078249 -0.81649658]
 [-0.81964194 -0.40189603  0.40824829]]

Singular values:
[9.52551809 0.51430058]

VT matrix:
[[-0.61962948 -0.78489445]
 [-0.78489445  0.61962948]]
